
#! ფუნქცია, რომელიც სვეტებისა და რიგების მიხედვით გამოხატავს თითოეული ელემენტის პოზიციას
def print_positions(row, col):
    # loopi-ით გადაუაროთ თითოეულ მწკრივს (rows)
    for u in range(1, row + 1):
        # loopi-ით გადაუაროთ თითოეულ სვეტს (col)
        for c in range(1, col + 1):
            # თითოეული პოზიციის დაბეჭდვა, სადაც ვუთითებთ row და col მნიშვნელობებს
            print(f"row: {u}, col: {c}")


print_positions(2, 2)


#! ფუნქცია, რომელიც ქმნის გამრავლების ტაბულას 1-დან 10-მდე და აბრუნებს მას 2D მასივის სახით
def multiplication_table():
    # შევქმნათ ცარიელი სია
    table = []
    
    # პირველი ციკლი: ვმივყვებით თითოეულ რიცხვს 1-დან 10-მდე (row)
    for i in range(1, 11):
        # ცარიელი სია, რომელშიც შეინახება მიმდინარე რიგის მონაცემები
        row = []
        # მეორე ციკლი: ვმივყვებით თითოეულ რიცხვს 1-დან 10-მდე (column)
        for j in range(1, 11):
            # გამრავლების შედეგის დამატება მიმდინარე რიგში
            row.append(i * j)
        
        # რიგის დამატება 2D მასივში (მატრიცაში)
        table.append(row)
    
    # 2D მასივის დაბრუნება, რომელიც შეიცავს გამრავლების ტაბულას
    return table

# გამრავლების ტაბულის შექმნა და დაბეჭდვა
table = multiplication_table()
for row in table:
    print(row)





#! ფუნქცია, რომელიც რიცხვის მიხედვით ბეჭდავს ყველა წყვილს, სადაც მეორე რიცხვი მეტია პირველზე
def print_greater_pairs(num):
    # ვმივყვებით პირველ რიცხვს 1-დან num-მდე
    for i in range(1, num + 1):
        # ვმივყვებით მეორე რიცხვს 1-დან num-მდე
        for j in range(1, num + 1):
            # შევამოწმოთ: მეორე რიცხვი j უნდა იყოს მეტი პირველზე i
            if i < j:
                # წყვილების დაბეჭდვა, სადაც მეორე რიცხვი მეტია პირველზე
                print(f"({i}, {j})")


print_greater_pairs(3)
